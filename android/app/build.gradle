def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
def releaseStoreFile = localProperties.getProperty('releaseStoreFile')
def releaseStorePassword = localProperties.getProperty('releaseStorePassword')
def releaseKeyAlias = localProperties.getProperty('releaseKeyAlias')
def releaseKeyPassword = localProperties.getProperty('releaseKeyPassword')

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.metalichesky.voicenote"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86'
        }
    }

    signingConfigs {
        release {
            storeFile file(releaseStoreFile)
            storePassword releaseStorePassword
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            shrinkResources false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"
    implementation "com.google.code.gson:gson:2.8.9"
    implementation 'net.java.dev.jna:jna:5.8.0@aar'
    implementation "com.alphacephei:vosk-android:0.3.32"
}

tasks.register('genUUID') {
    def assetsDir = file("$projectDir\\src\\main\\assets\\")
    assetsDir.listFiles().each { assetsFile ->
        if (assetsFile.isDirectory() && assetsFile.name.contains("model")) {
            println("found model ${assetsFile.name}")
            def modelDir = assetsFile
            def uuidFile = file("$modelDir/uuid")
            if (!uuidFile.exists()) {
                println("uuid file ${uuidFile} create")
                def uuid = UUID.randomUUID().toString()
                doLast {
                    uuidFile.text = uuid
                }
            } else {
                println("uuid file ${uuidFile} already exists")
            }
        }
    }
}

preBuild.dependsOn(genUUID)